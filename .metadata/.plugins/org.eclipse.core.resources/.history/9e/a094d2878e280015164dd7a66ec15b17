package main;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

public class Solution {
	public static List<List<Integer>> fourSum(int[] nums, int target) {
		List<Integer> list = new LinkedList<Integer>();
		List<List<Integer>> output = new ArrayList<>();
		
		boolean visited[] = new boolean[1000];
		
		
        for(int i = 0; i < nums.length; i++) {
        	list.add(nums[i]);
        }
        
        for(int i = 0 ; i < nums.length; i++ ){
        	if(i > 0 && nums[i] == nums[i-1])
        		continue;
        	
        	
        	List<Integer> list2 = new LinkedList<>(list);
        	list2.remove(i);
        	List<List<Integer>> out = threeSum(list2, target-nums[i]);
        	if(!out.isEmpty()) {
        		for(List<Integer> sol : out) {
        			sol.add(nums[i]);
        			Collections.sort(sol);
        		}
        		output.addAll(out);
        	}
        		
        	
        }
        
        return output;
    }
	
	
	
	public static List<List<Integer>> threeSum(List<Integer> list, int threeTarget) {
		if(list.size() < 3)
			return new ArrayList<List<Integer>>();
		
		       
        Collections.sort(list);
        List<List<Integer>> solList = new ArrayList<List<Integer>>();
        List<Integer> sol = new ArrayList<>();
        
        for(int i = 0 ; i < list.size(); i++) {
        	if(i > 0 && list.get(i) == list.get(i-1))
        		continue;
        	int target = threeTarget-list.get(i);
	        int lowP = i+1, highP = list.size()-1;
	        
	        while(lowP < highP ) {        	
	        	if(list.get(lowP) + list.get(highP) < target) {
	        		lowP++;	        		
	        	}
	        	
	        	else if(list.get(lowP) + list.get(highP) > target) {
	        		highP--;	        	
	        	}
	        	
	        	else {        		
	        		sol.add(list.get(i));
		        	sol.add(list.get(lowP));
		        	sol.add(list.get(highP));
		        	Collections.sort(sol);
		        	solList.add(sol);
		        	sol = new ArrayList<>();
		        	lowP++;
		        	highP--;
		        	
		        	while(lowP < highP && list.get(lowP) == list.get(lowP-1))
		        		lowP++;
		        	while(lowP < highP && list.get(highP) == list.get(highP+1))
		        		highP--;		        		        		
	        	}	        	
	        }
	        

	        
        }
        return solList;
    }
	
	public static void main(String[] args) {
		int nums[] = {1,0,-1,0,-2,2};
		System.out.println(fourSum(nums, 0));
	}
}
