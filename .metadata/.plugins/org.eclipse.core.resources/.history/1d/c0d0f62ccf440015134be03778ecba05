package main;

import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.Set;

public class Solution {
	static int minStep;
	public static int ladderLength(String beginWord, String endWord, Set<String> wordDict) {
		Queue<String> queue = new LinkedList<>();
		queue.add(beginWord);
		
		Map<String, Integer> dis = new HashMap<>();
		dis.put(beginWord, 1);
		
		while(!queue.isEmpty() ) {
			String temp = queue.poll();
			
			
			
			for(int i = 0 ; i < temp.length(); i++) {
				char[] tempCharArr = temp.toCharArray();
				for(char c = 'a'; c <= 'z' ; c++ ) {
					tempCharArr[i] = c;
					String changed = new String(tempCharArr);
					if(changed.equals(endWord))
						return dis.get(temp) + 1;
					Set<String> tempDict = new HashSet<>(wordDict);
					if(tempDict.contains(changed)) {
						queue.add(changed);
						dis.put(changed, dis.get(temp) + 1);
						wordDict.remove(changed);
					}
				}
				System.out.print("");
			}
			
		}
		return 0;
    }
	
	
	static boolean changeable(String word1, String word2) {	//Assume two words share same length
		int diff = 0;
		for(int i = 0 ; i < word1.length(); i++) {
			if(word1.charAt(i) != word2.charAt(i))
				diff++;
			if(diff > 1)
				return false;
		}
		return true;
	}
	
	public static void main(String[] args) {
		Set<String> dict = new HashSet<>();
		dict.add("hot");
		dict.add("dot");
		dict.add("dog");
		dict.add("lot");
		dict.add("log");
		System.out.print(ladderLength("hit", "cog", dict));
	}
}
