import java.io._
import scalala.library.Plotting._
import scalala.tensor.dense.DenseVector
import java.awt.Color
import scalala.library.plotting.GradientPaintScale
/**
 * @author Ruiwen
 */


object Test {
  def main(args: Array[String]): Unit = {
//    val basePath = "/Users/Ruiwen/Desktop/KNN_Example_1.csv"
//    val testData = getDataFromCSV(new File(basePath)) 
//    val plot = ScatterPlot.plot(testData._1,
//                                 testData._2, 
//                                 '@', 
//                                 Array(Color.red, Color.blue)
//                                )
//    println(testData)
    val x = DenseVector.randn(10)
val y = DenseVector.randn(10)
val s = DenseVector.rand(10) :/ 5

val labels : PartialFunction[Int,String] =
  Map(1->"Red", 4->"Blue")

val tips : PartialFunction[Int,String] =
  {case i : Int => i.toString}

figure(1)

val literalColors : PartialFunction[Int,Color] =
  Map(1->Color.RED, 4->Color.BLUE) orElse { case x : Int => Color.WHITE }

scatter(x, y, s, literalColors, labels=labels, tips=tips)


figure(2)

val c = DenseVector.rand(10);

val paintScale = GradientPaintScale(0.0, 1.0)

val scaleColors = Map() ++ (0 until c.length).map(i => (i, paintScale(c(i))));

scatter(x, y, s, scaleColors, labels = labels, tips = tips)
  }
  def getDataFromCSV(file: File): (Array[Array[Double]], Array[Int]) = {
    val source = scala.io.Source.fromFile(file)
    val data = source
        .getLines()
        .drop(1)
        .map(x => getDataFromString(x))
        .toArray

    source.close()
    val dataPoints = data.map(x => x._1)
    val classifierArray = data.map(x => x._2)

   

    return (dataPoints, classifierArray)        
  }

  def getDataFromString(dataString: String): (Array[Double], Int) = {

    //Split the comma separated value string into an array of strings
    val dataArray: Array[String] = dataString.split(',')

    //Extract the values from the strings
    val xCoordinate: Double = dataArray(0).toDouble
    val yCoordinate: Double = dataArray(1).toDouble
    val classifier: Int = dataArray(2).toInt

    //And return the result in a format that can later 
    //easily be used to feed to Smile
    return (Array(xCoordinate, yCoordinate), classifier)
  }
}