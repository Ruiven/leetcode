package main;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Solution {
	public static List<List<Integer>> threeSum(int[] nums) {
		if(nums.length < 3)
			return new ArrayList<List<Integer>>();
		
		List<Integer> list = new ArrayList<Integer>();
        for(int i : nums) {
        	list.add(i);
        }        
        Collections.sort(list);
        Set<List<Integer>> solList = new HashSet<List<Integer>>();
        List<Integer> sol = new ArrayList<>();
        
        for(int i = 0 ; i < list.size(); i++) {
        
        	int target = -list.get(i);
	        int lowP = 0, highP = list.size()-1;
	        
	        while(lowP <= highP && lowP < list.size() && highP >= 0) {
	        	if(lowP == i)
	        		lowP++;
	        	if(highP == i)
	        		highP--;
	        	if(list.get(lowP) + list.get(highP) < target) {
	        		lowP++;
	        		
	        		continue;
	        	}
	        	
	        	else if(list.get(lowP) + list.get(highP) > target) {
	        		highP--;
	        		continue;
	        	}
	        	
	        	else if(lowP != highP) {
	        		
	        		sol.add(list.get(i));
		        	sol.add(list.get(lowP));
		        	sol.add(list.get(highP));
		        	Collections.sort(sol);
		        	solList.add(sol);
		        	sol = new ArrayList<>();
	        		
	        	}
	        	
	        	//break;	        	
	        }
	        
//	        if(lowP < list.size() && highP >= 0 && list.get(lowP) + list.get(highP) == target && lowP != highP) {
//	        	sol.add(list.get(i));
//	        	sol.add(list.get(lowP));
//	        	sol.add(list.get(highP));
//	        	Collections.sort(sol);
//	        	solList.add(sol);
//	        	sol = new ArrayList<>();
//	        }
	        	
	        
        }
        return new ArrayList<List<Integer>>(solList);
    }

	
	public static List<List<Integer>> combinationSum(int[] candidates) {
		int target = 0;
		Set<List<Integer>> result = new HashSet<List<Integer>>();
		if(candidates == null || candidates.length == 0)
			return new ArrayList<List<Integer>>();
		
		Arrays.sort(candidates);
		backtrack(target, candidates, new ArrayList<Integer>(), result, 0);
		
		List<List<Integer>> out = new ArrayList<List<Integer>>();
		for(List<Integer> list : result)
			out.add(list);
		
		
        return out;
    }
	
	static void backtrack(int target, int[] candidates, ArrayList<Integer> current, Set<List<Integer>> result, int pos) {
		if(target == 0 && current.size() == 3) {
			List<Integer> sol = new ArrayList<Integer>(current);
			Collections.sort(sol);
			result.add(sol);
			return;
		}
		
		if(current.size() >= 3)
			return;
		
		for(int i = pos; i < candidates.length; i++) {
			if(candidates[i] > target)					//this coin is too large
				return;
			
			current.add(candidates[i]);
			backtrack(target-candidates[i], candidates, current, result, i);
			current.remove(current.size()-1);
		}
		
	}
	
	public static void main(String[] args) {
		int nums[] = {-4,-2,-2,-2,0,1,2,2,2,3,3,4,4,6,6};
		System.out.println(combinationSum(nums));
	}
}
