package main;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class Solution {
	static int minStep;
	public static int ladderLength(String beginWord, String endWord, Set<String> wordDict) {
		
		wordDict.add(endWord);
		wordDict.add(beginWord)
		
        Map<String, Integer> distance = new HashMap<String, Integer>();
        for(String s : wordDict)
        	distance.put(s, wordDict.size()+2);
        distance.put(beginWord, 0);
        
        Set<String> visited = new HashSet<>();
        while(!wordDict.isEmpty()) {
        	String minString = null;
        	int min = 9999;
        	for(String s : wordDict) {
        		if(distance.get(s) < min) {
        			min = distance.get(s);
        			minString = s;
        		}
        	}
        	
        	if(minString.equals(endWord))
        		return distance.get(minString);
        	
        	wordDict.remove(minString);
        	visited.add(minString);
        	for(String s : wordDict) {
        		if(changeable(s, minString)) {
        			if(distance.get(s) > distance.get(minString) + 1)
        				distance.put(s, distance.get(minString) + 1);
        		}
        	}
        }
        return distance.get(endWord);
    }
	
	
	static boolean changeable(String word1, String word2) {	//Assume two words share same length
		int diff = 0;
		for(int i = 0 ; i < word1.length(); i++) {
			if(word1.charAt(i) != word2.charAt(i))
				diff++;
			if(diff > 1)
				return false;
		}
		return true;
	}
	
	public static void main(String[] args) {
		Set<String> dict = new HashSet<>();
		dict.add("hot");
		dict.add("dot");
		dict.add("dog");
		dict.add("lot");
		dict.add("log");
		System.out.print(ladderLength("hit", "cog", dict));
	}
}
