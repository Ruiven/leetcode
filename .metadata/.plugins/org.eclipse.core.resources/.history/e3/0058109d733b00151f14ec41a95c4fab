package main;

import java.util.HashMap;
import java.util.Map;

class TreeNode {
	int val;
	TreeNode left;
	TreeNode right;
	TreeNode(int x) { val = x; }
}

public class Solution {
	public TreeNode buildTree(int[] inorder, int[] postorder) {
		if(inorder == null || postorder.length == 0)
        	return null;
        
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i = 0 ; i < inorder.length; i++)
        	map.put(inorder[i], i);
        
        return recursive(inorder, 0, postorder.length-1, inorder, 0, inorder.length-1, map);
    }
	
	
	TreeNode recursive(int[] inorder, int il, int ir, int[] postorder, int pl, int pr, Map<Integer, Integer> map) {
		if(pl > pr || il > ir)
			return null;
		
		if(pl == pr)
			return new TreeNode(postorder[pl]);
		
		
		
		TreeNode head = new TreeNode(preoder[pl]);
		int i = map.get(preoder[pl]);
		head.left = recursive(preoder, pl+1, pl+i-il, inorder, il, i-1, map);
		head.right = recursive(preoder, pl+i-il+1, pr, inorder, i+1, ir, map);
		return head;
	}
}
