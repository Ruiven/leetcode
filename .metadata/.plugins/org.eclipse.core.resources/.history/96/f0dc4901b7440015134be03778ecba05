package main;

import java.util.HashSet;
import java.util.Set;

public class Solution {
	static int minStep;
	public static int ladderLength(String beginWord, String endWord, Set<String> wordDict) {
        minStep = wordDict.size();
        backtrack(beginWord, endWord, wordDict, 0);
        return minStep;
    }
	
	static void backtrack(String tempWord, String endWord, Set<String> wordDict, int step) {
		if(tempWord.equals(endWord)) {
			minStep = Math.min(minStep, step);
			return;
		}
		
		for(String word : wordDict) {
			if(changeable(word, tempWord)) {
				Set<String> tempDict = new HashSet<>(wordDict);
				
				tempDict.remove(word);
				backtrack(word, endWord, tempDict, step+1);
				tempDict.clear();
			}
		}
		
	}
	
	static boolean changeable(String word1, String word2) {	//Assume two words share same length
		int diff = 0;
		for(int i = 0 ; i < word1.length(); i++) {
			if(word1.charAt(i) != word2.charAt(i))
				diff++;
			if(diff > 1)
				return false;
		}
		return true;
	}
	
	public static void main(String[] args) {
		Set<String> dict = new HashSet<>();
		dict.add("hot");
		dict.add("dot");
		dict.add("dog");
		dict.add("lot");
		dict.add("log");
		System.out.print(ladderLength("hit", "cog", dict));
	}
}
